name: Build and Deploy CustomerApi to ECS

on:
  workflow_call:
    inputs:
      ECR_BACKEND_IMAGE: 
        required: true
        type: string
      AWS_DEFAULT_REGION: 
        required: true
        type: string
      ECS_CLUSTER: 
        required: true
        type: string
      ECS_BACKEND_SERVICE: 
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID: 
        required: true
      AWS_SECRET_ACCESS_KEY: 
        required: true
      AWS_ACCOUNT_ID: 
        required: true
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up QEMU for arm64
        if: runner.os == 'Linux'
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Set up Docker for arm64
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com

      - name: Build and push Docker image
        run: |
          cd backend
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/arm64 \
            -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_BACKEND_IMAGE:latest \
            --push .

      - name: Deploy to ECS
        uses: imehedi/actions-awscli-v2@latest
        with:
          args: ecs update-service --cluster ${{ inputs.ECS_CLUSTER }} --service ${{ inputs.ECS_BACKEND_SERVICE }} --force-new-deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ inputs.AWS_DEFAULT_REGION }}
